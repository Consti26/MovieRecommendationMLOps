# Use Miniconda as the base image
FROM continuumio/miniconda3
RUN conda clean --all -y
RUN conda update conda
# Install necessary dependencies for user management
RUN apt-get update && apt-get install -y sudo

# Create a non-root user and group
RUN groupadd -r mlflow && useradd -r -m -g mlflow mlflow

# Create the /mlflow directory and set the user permissions
RUN mkdir -p /mlflow /conda_envs /conda_pkgs /mlflow/artifacts
RUN chown -R mlflow:mlflow /mlflow /conda_envs /conda_pkgs /mlflow/artifacts
RUN chmod -R 777 /mlflow /conda_envs /conda_pkgs /mlflow/artifacts

RUN touch /mlflow/mlflow_sees_this_dir

# Set the working directory to /mlflow
WORKDIR /mlflow

# Switch to the non-root user
USER mlflow

# Copy the environment.yml file to the container
COPY environment.yml .

# Configure Conda to use the custom directories
RUN conda config --add envs_dirs /conda_envs
RUN conda config --add pkgs_dirs /conda_pkgs

# Create the conda environment using the custom directories
RUN conda env create -f environment.yml

# Make RUN commands use the new environment
SHELL ["conda", "run", "-n", "mlflow_env", "/bin/bash", "-c"]

# Use ARG to accept build-time variable
ARG MLFLOW_PORT
# ENV PORT=${DATABASE_PORT}

# Expose the application port
EXPOSE ${MLFLOW_PORT}
RUN echo "The mlflow port is: ${MLFLOW_PORT}"

ENV MLFLOW_PORT=${MLFLOW_PORT}

# Set the entry point to run the MLFlow server as the non-root user
# ENTRYPOINT ["conda", "run", "-n", "mlflow_env", "mlflow", "server", "--host", "0.0.0.0", "--default-artifact-root", "/mlflow/artifacts", "--port", "${MLFLOW_PORT}"]
ENTRYPOINT ["sh", "-c", "conda run -n mlflow_env mlflow server --host 0.0.0.0 --default-artifact-root /mlflow/artifacts --port ${MLFLOW_PORT}"]